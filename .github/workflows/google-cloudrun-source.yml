# This workflow will deploy source code on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Cloud Build          cloudbuild.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Cloud Build
#      roles/cloudbuild.builds.editor
#
#    Cloud Storage
#      roles/storage.objectAdmin
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the SERVICE and REGION environment variables (below).
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run runtime service account   - https://cloud.google.com/run/docs/securing/service-identity
#   Cloud Run IAM permissions           - https://cloud.google.com/run/docs/deploying-source-code#permissions_required_to_deploy
#   Cloud Run builds from source        - https://cloud.google.com/run/docs/deploying-source-code
#   Principle of least privilege        - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Deploy to Cloud Run from Source

on:
  push:
    branches:
      - "main"

env:
  # PROJECT_ID: ${{ YOUR_PROJECT_ID }} # TODO: update Google Cloud project id
  # SERVICE: YOUR_SERVICE_NAME # TODO: update Cloud Run service name
  REGION: 'us-west1' #YOUR_SERVICE_REGION # TODO: update Cloud Run service region

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
      #     service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      - id: idtoken
        shell: bash
        run: |
          token=${ACTIONS_ID_TOKEN_REQUEST_TOKEN}
          runtimeUrl=${ACTIONS_ID_TOKEN_REQUEST_URL}
          runtimeUrl="${runtimeUrl}&audience=google-wlif"
          ID_TOKEN=$(curl -H "Authorization: bearer ${token}" ${runtimeUrl} | jq -r ".value")
          echo ::set-output name=idtoken::$ID_TOKEN
          echo $ID_TOKEN > idtoken.txt
        
      - name: curlGoogle
        run: |
          STS_TOKEN=$(curl -0 -X POST https://sts.googleapis.com/v1/token \
              -H 'Content-Type: text/json; charset=utf-8' \
              -d @- <<EOF | jq -r .access_token
              {
                  "audience"           : "//iam.googleapis.com/projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider",
                  "grantType"          : "urn:ietf:params:oauth:grant-type:token-exchange",
                  "requestedTokenType" : "urn:ietf:params:oauth:token-type:access_token",
                  "scope"              : "https://www.googleapis.com/auth/cloud-platform",
                  "subjectTokenType"   : "urn:ietf:params:oauth:token-type:jwt",
                  "subjectToken"       : "${{steps.idtoken.outputs.idtoken}}"
              }
          EOF)
          echo $STS_TOKEN
          echo $STS_TOKEN > sts_token.txt
          echo ::set-output name=sts_token::$STS_TOKEN
          echo $STS_TOKEN

      - id: access_token
        shell: bash
        run: |
          ACCESS_TOKEN=$(curl -0 -X POST https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${{secrets.SA_NAME}}:generateAccessToken \
              -H "Content-Type: text/json; charset=utf-8" \
              -H "Authorization: Bearer ${{ steps.sts_token.outputs.sts_token }}" \
              -d @- <<EOF | jq -r .accessToken
              {
                  "scope": [ "https://www.googleapis.com/auth/cloud-platform" ]
              }
          EOF)
          echo $ACCESS_TOKEN > access_token.txt
          echo ::set-output name=access_token::$ACCESS_TOKEN

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/gh-pool/providers/gh-provider'
          service_account: ${{ secrets.SA_EMAIL }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: ListPubSub
        run: gcloud pubsub topics list
        
      - name: GetBuckets
        run: |

          curl https://storage.googleapis.com/storage/v1/b/ --header "Authorization: Bearer ${{ steps.auth.outputs.access_token }}"
      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # - name: Deploy to Cloud Run
      #   id: deploy
      #   uses: google-github-actions/deploy-cloudrun@v0
      #   with:
      #     service: ${{ env.SERVICE }}
      #     region: ${{ env.REGION }}
      #     # NOTE: If required, update to the appropriate source folder
      #     source: ./

      # # If required, use the Cloud Run url output in later steps
      # - name: Show Output
      #   run: echo ${{ steps.deploy.outputs.url }}
      #